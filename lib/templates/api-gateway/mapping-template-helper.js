'use strict';

const _shortId = require('shortid');

function _getSource(sourceName) {
    const sourceMap = {
        body: 'path',
        params: 'params',
        querystring: 'params',
        header: 'params',
        url: 'params'
    };
    let source = sourceMap[sourceName];
    if(!source) {
        source = 'path';
    }
    return source;
}

/**
 * A module with utility functions that help with request and response mapping
 * templates. Most methods return apache velocity template snippets that can
 * be embedded into a larger template object.
 */
const mappingTemplateHelper = {

    /**
     * Generates a user info snippet based on a JWT token specified via an
     * input parameter (typically header). This snippet assumes that the header
     * value contains a valid JWT token. Requests to the server can be
     * malformed if this assumption is not valid.
     *
     * @param {String} [jwtTokenName='Authorization'] An optional jwt token name.
     *        This value will be used to extract the JWT token from the input
     *        request.
     * @param {String} [prop='_user'] An optional value that specifies the name
     *        of the property generated by this snippet.
     *
     * @return {String} An apache velocity template snippet that can be
     *        injected into a larger template.
     */
    mapUserFromJwt: function(jwtTokenName, prop) {
        if(typeof jwtTokenName !== 'string' || jwtTokenName.length <= 0) {
            jwtTokenName = 'Authorization';
        }
        if(typeof prop !== 'string' || prop.length <= 0) {
            prop = '_user';
        }

        const tokenVar = `$jwtTokens_${_shortId.generate().replace(/-/g, '_')}`;

        return `#set(${tokenVar} = $input.params('${jwtTokenName}').split('\\.'))
#if(${tokenVar}.size() > 2)
    "${prop}": $util.base64Decode(${tokenVar}[1])
#end`;
    },

    /**
     * Generates a template snippet that injects a property mapping into the
     * output.
     *
     * @param {String} inputProp The name of the input property
     * @param {String} outputProp The name of the property.
     * @param {Object} [options={
     *                     noQuotes: false,
     *                     source: 'body',
     *                     noComma: false,
     *                     defaultValue: undefined
     *                 }] Optional object that determines:
     *                 (a) If the property value is a string
     *                 (b) The source of the input value (body/params)
     *                 (c) Whether the leading comma on the property assignment
     *                     is suppressed
     *                 (b) The default value to assign to the output if the
     *                     input is empty.
     *
     * @return {String} An apache velocity template snippet that can be
     *        injected into a larger template.
     */
    mapProperty: function(inputProp, outputProp, options) {
        options = options || {};

        const source = _getSource(options.source);
        const quote = (!!options.noQuotes)? '': '"';
        const comma = (!!options.noComma)? '':',';
        let elseClause = '';

        const inputExpr = `$input.${source}('${inputProp}')`;
        if(typeof options.defaultValue !== 'undefined') {
            const defaultValue = (typeof options.defaultValue === 'string')?
                                    options.defaultValue:
                                    JSON.stringify(options.defaultValue);
            elseClause = `#else
    ${comma}"${outputProp}": ${quote}${defaultValue}${quote}
`
        }

        return `#if(${inputExpr} != "")
    ${comma}"${outputProp}": ${quote}${inputExpr}${quote}
${elseClause}#end`;
    }
}

module.exports = mappingTemplateHelper;
