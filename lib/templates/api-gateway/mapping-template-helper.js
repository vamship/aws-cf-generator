'use strict';

const _shortId = require('shortid');

/**
 * A module with utility functions that help with request and response mapping
 * templates. Most methods return apache velocity template snippets that can
 * be embedded into a larger template object.
 */
const mappingTemplateHelper = {

    /**
     * Generates a user info snippet based on a JWT token specified via an
     * input parameter (typically header). This snippet assumes that the header
     * value contains a valid JWT token. Requests to the server can be
     * malformed if this assumption is not valid.
     *
     * @param {String} [jwtTokenName='auth'] An optional jwt token name.
     *        This value will be used to extract the JWT token from the input
     *        request.
     * @param {String} [prop='_user'] An optional value that specifies the name
     *        of the property generated by this snippet.
     *
     * @return {String} An apache velocity template snippet that can be
     *        injected into a larger template.
     */
    mapUserFromJwt: function(jwtTokenName, prop) {
        if(typeof jwtTokenName !== 'string' || jwtTokenName.length <= 0) {
            jwtTokenName = 'auth';
        }
        if(typeof prop !== 'string' || prop.length <= 0) {
            prop = '_user';
        }

        const tokenVar = `$jwtTokens_${_shortId.generate().replace(/-/g, '_')}`;

        return `#set(${tokenVar} = $input.params('${jwtTokenName}').split('\\.'))
#if(${tokenVar}.size() > 2)
    "${prop}": $util.base64Decode(${tokenVar}[1])
#end`;
    },

    /**
     * Generates a template snippet that injects a string property into the
     * output if the input value is non empty.
     *
     * @param {String} inputProp The name of the input property
     * @param {String} outputProp The name of the property.
     * @param {Boolean} [source='path'] Determines the source of the input
     *        property. If set to 'param', will query the input parameters.
     * @param {Boolean} [firstProp=false] If set to true, will treat the the
     *        injected property as the first property in the object, which
     *        means that the leading comma will be suppressed.
     *
     * @return {String} An apache velocity template snippet that can be
     *        injected into a larger template.
     */
    mapNonEmptyString: function(inputProp, outputProp, source, firstProp) {
        if(typeof source !== 'string') {
            source = 'path';
        }
        const comma = (!!firstProp)? '':',';
        return `#if($input.${source}('${inputProp}') != "")
    ${comma}"${outputProp}": "$input.${source}('${inputProp}')"
#end`;
    },

    /**
     * Generates a template snippet that injects a number property into the
     * output if the input value is non empty.
     *
     * @param {String} inputProp The name of the input property
     * @param {String} outputProp The name of the property.
     * @param {Boolean} [source='path'] Determines the source of the input
     *        property. If set to 'params', will query the input parameters
     *        (path/querystring/header).
     * @param {Boolean} [firstProp=false] If set to true, will treat the the
     *        injected property as the first property in the object, which
     *        means that the leading comma will be suppressed.
     *
     * @return {String} An apache velocity template snippet that can be
     *        injected into a larger template.
     */
    mapNonEmptyProperty: function(inputProp, outputProp, source, firstProp) {
        if(typeof source !== 'string') {
            source = 'path';
        }
        const comma = (!!firstProp)? '':',';
        if(!!firstProp) {

        }
        return `#if($input.${source}('${inputProp}') != "")
    ${comma}"${outputProp}": $input.${source}('${inputProp}')
#end`;
    }

}

module.exports = mappingTemplateHelper;
